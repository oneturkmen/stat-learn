packages.download(boot)
package.download("boot")
download.packages("boot")
install.packages("boot")
require(ISLR)
require(boot)
?cv.glm
plot(mpg ~ horsepower,data=Auto)
?data
?plot
?cv.glm
?plot(mpg ~ horsepower,data=Auto)
?plot(mpg ~ horsepower,data=Auto)
plot(mpg ~ horsepower,data=Auto)
plot(mpg ~ horsepower,data=Auto)
?plot(mpg ~ horsepower,data=Auto)
?~
?~
;
plot(mpg ~ horsepower,data=Auto)
?glm
glm.fit=glm(mpg ~ horsepower, data=Auto)
View(glm.fit)
View(data.frame(glm.fit))
View(table(glm.fit))
?cv.glm
glm.fit=glm(mpg ~ horsepower, data=Auto)
cv.glm(Auto,glm.fit)$delta
?cv.glm
?lm.influence
hat = lm.influence(fit)$h
loocv=function(fit) {
hat = lm.influence(fit)$h
}
loocv=function(fit) {
hat = lm.influence(fit)$h
mean((residuals(fit)/(1-hat))^2)
}
View(loocv)
hat
loocv(glm.fit)
loocv(glm.fit)
cv.glm(Auto,glm.fit)$delta #pretty slow
loocv(glm.fit)
?rep
cv.error=rep(0,5)
degree=1:5
plot(mpg ~ horsepower,data=Auto)
?poly
cv.error=rep(0,5)
degree=1:5
for (d in degree) {
glm.fit = glm(mpg~poly(horsepower,d), data=Auto)
cv.error[d] = loocv(glm.fit)
}
plot(degree, cv.error, type="b")
?poly
cv.error10=rep(0,5)
for (d in degree) {
glm.fit=glm(mpg~poly(horsepower,d), data=Auto)
cv.error10[d]=cv.glm(Auto, glm.fit, K=10)$delta[1]
}
lines(degree,cv.error10,type="b",col="red")
rm(list=ls())
plot(c(rep(0,5)),c(rep(1,10)))
plot(c(rep(0,5)),c(rep(1,6)))
plot(c(rep(0,5)),c(rep(1,5)))
rm(list=ls())
alpha = function(x,y) {
# Var is variance. Variance is basically
# risk of investment here
vx = var(x)
vy = var(y)
cxy=cov(x,y)
(vy-cxy)/(vx+vy-2*cxy)
}
?sample
alpha(Portfolio$X,Portfolio$Y)
?with
alpha.fn = function(data, index) {
with(data[index,],alpha(X,Y))
}
alpha.fn(Portfolio,1:100)
set.seed(1)
alpha.fn(Portfolio,sample(1:100,100,replace=TRUE))
sample(1:100,100,replace=TRUE))
alpha.fn(Portfolio,sample(1:100,100,replace=TRUE))
alpha.fn(Portfolio,sample(1:100,100,replace=TRUE))
alpha.fn(Portfolio,sample(1:100,100,replace=TRUE))
alpha.fn(Portfolio,sample(1:100,100,replace=TRUE))
alpha.fn(Portfolio,sample(1:100,100,replace=TRUE))
alpha.fn(Portfolio,sample(1:100,100,replace=TRUE))
alpha.fn(Portfolio,sample(1:100,100,replace=TRUE))
alpha.fn(Portfolio,sample(1:100,100,replace=TRUE))
?boot
boot.out=boot(Portfolio, alpha.fn, R=1000)
boot.out=boot(Portfolio, alpha.fn, R=1000)
boot.out
plot(boot.out)
plot(boot.out)
?cv.glm
require(ISLR)
cv.error=rep(0,5)
require(ISLR)
require(boot)
?cv.glm
?cv
?cv.error
cv.glm(Auto,glm.fit)
plot(mpg ~ horsepower,data=Auto)
glm.fit=glm(mpg ~ horsepower, data=Auto)
cv.glm(Auto,glm.fit)$delta #pretty slow
cv.glm(Auto,glm.fit)
?lm.influence
lm.influence(fit)
lm.influence(glm.fit)
loocv=function(fit) {
hat = lm.influence(fit)$h
mean((residuals(fit)/(1-hat))^2)
}
loocv(glm.fit)
cv.error=rep(0,5)
cv.error
degree=1:5
for (d in degree) {
glm.fit = glm(mpg~poly(horsepower,d), data=Auto)
cv.error[d] = loocv(glm.fit)
}
plot(degree, cv.error, type="b")
cv.error10=rep(0,5)
for (d in degree) {
glm.fit=glm(mpg~poly(horsepower,d), data=Auto)
cv.error10[d]=cv.glm(Auto, glm.fit, K=10)$delta[d]
}
lines(degree,cv.error10,type="b",col="red")
for (d in degree) {
glm.fit=glm(mpg~poly(horsepower,d), data=Auto)
cv.error10[d]=cv.glm(Auto, glm.fit, K=10)$delta[1]
}
lines(degree,cv.error10,type="b",col="red")
